<?phpclass Chatrecording_model extends MY_Model {	protected $_table = 'qm.recordings';	protected $primary_key = 'record_id';	function get_base_on_user_id($userid)	{		$this->db->join('qm_form', 'recordings.qm_id = qm_form.qm_id');		$this->db->where('userid', $userid);		return $this;	}	function join_user_current_week($userid)	{		$this->load->database('reportcallcenter', TRUE);		//$this->load->database('callcenter', TRUE);		$this->db->join('reportcallcenter.callcontactsdetails', 'recordings.unique_id = callcontactsdetails.callid');		//$this->db->join('callcenter.users', 'recordings.userid = users.userid');		$this->db->order_by('reportcallcenter.callcontactsdetails.connecttime', 'desc');		$this->db->where('qm.recordings.supervisor_id', $userid);		$this->db->where('recordings.recording_type', 2);		return $this;	}	function preview_recording($date,$userid)	{		$this->load->database('reportcallcenter', TRUE);		$this->load->database('callcenter', TRUE);		$this->db->join('reportcallcenter.callcontactsdetails', 'recordings.unique_id = callcontactsdetails.callid');		$this->db->join('callcenter.users', 'recordings.userid = users.userid');		$this->db->where('recordings.supervisor_id', $userid);		$this->db->where('date(callcontactsdetails.connecttime)', $date);		$this->db->where('recordings.recording_type', 2);		$this->db->order_by('reportcallcenter.callcontactsdetails.connecttime', 'desc');		return $this;	}	function get_agent($userid)	{		$this->load->database('callcenter', TRUE);		$this->db->join('callcenter.users', 'recordings.userid = users.userid');		$this->db->where('recordings.supervisor_id', $userid);		$this->db->where('recordings.recording_type', 2);		$this->db->order_by('qm.recordings.date_created', 'desc');		return $this;	}	function search_list($tenant_id, $userid, $searchData=array(), $per_page=null, $current_page=null)	{		$datetime = date('Y-m-d');		$date = $this->x_week_range($datetime);		if (isset($per_page) && isset($current_page) ){			$this->db->limit($per_page, $current_page);		}		//$this->load->database('webim_db', TRUE);//		$this->db->join('webim_db.chatmessage', 'qm.recordings.unique_id = chatmessage.threadid');						if (isset($searchData['search_search_type'])){			if($searchData['search_search_type'] == 1){			// get this week range			$first_date_current_week = $date[0];			$end_date_current_week = $date[1];			$this->db->where('date(`recordings`.`date_created`) >=  ', $first_date_current_week);			$this->db->where('date(`recordings`.`date_created`) <=  ', $end_date_current_week);			}else if($searchData['search_search_type'] == 2){				// current month				$month_start = strtotime('first day of this month', time());				$month_end = strtotime('last day of this month', time());				$first_date_current_month = date('Y-m-d', $month_start).'<br/>';				$end_date_current_month = date('Y-m-d', $month_end).'<br/>';				$this->db->where('date(`recordings`.`date_created`) >=  ', $first_date_current_month);				$this->db->where('date(`recordings`.`date_created`) <=  ', $end_date_current_month);			}else{				if (isset($searchData['search_start_date'])){					$this->db->where('date(`recordings`.`date_created`) >=  ', $searchData['search_start_date']);					$this->db->where('date(`recordings`.`date_created`) <  ', $date[0]);				}				if (isset($searchData['search_end_date'])){					$this->db->where('date(`recordings`.`date_created`) <=  ', $searchData['search_end_date']);					$this->db->where('date(`recordings`.`date_created`) <  ', $date[0]);				}			}		}		if (isset($searchData['search_status'])){			if($searchData['search_status'] == 3){				$this->db->where('recordings.status !=', 1);				$this->db->where('recordings.status !=', 2);				$this->db->where('recordings.status !=', 4);			}else{				$this->db->where('recordings.status', $searchData['search_status']);			}		}		if(isset($searchData['search_recover'])){			$this->db->where('recordings.recover', $searchData['search_recover']);		}		$this->db->where('recordings.recording_type', 2);		$this->db->where('recordings.tenantid', $tenant_id);		$this->db->order_by('date_created','desc');		return $this;	}	function search_recording($agent_name,$start_date,$end_date,$status,$userid,$check_old_date)	{		//$this->load->database('reportcallcenter', TRUE);		//$this->load->database('callcenter', TRUE);		//$this->db->join('reportcallcenter.callcontactsdetails', 'recordings.unique_id = reportcallcenter.callcontactsdetails.callid');		//$this->db->join('callcenter.users', 'recordings.userid = users.userid');		if(isset($per_page) && isset($current_page) ){			$this->db->limit($per_page, $current_page);		}		if(!empty($agent_name)){			$this->db->like('users.username', $agent_name);		}		if(!empty($start_date)){			$this->db->where('date(`recordings`.`date_created`) >=  ', $start_date);		}		if(!empty($end_date)){			$this->db->where('date(`recordings`.`date_created`) <=  ', $end_date);		}		if(!empty($status)){			if($status == 3){				$this->db->where('recordings.status', 3);				$this->db->where('recordings.status', 5);			}else if($status == 5){				$this->db->where('recordings.recover', 1);			}else{				$this->db->where('recordings.status', $status);			}		}		//$this->db->where('date(callcontactsdetails.connecttime) <  ', $check_old_date);		//$this->db->where('recordings.recording_type', 0);		$this->db->where('recordings.recording_type', 2);		//$this->db->where('date(recordings.date_created) <  ', $check_old_date);		$this->db->where('recordings.supervisor_id', $userid);		//$this->db->order_by('users.username', 'asc');		//$this->db->order_by('callcontactsdetails.connecttime', 'desc');		$this->db->order_by('recordings.date_created', 'desc');		//$this->db->limit(100);		return $this;	}	function search_recording2($agent_name,$start_date,$end_date,$status,$userid,$check_old_date)	{		//$this->load->database('reportcallcenter', TRUE);		//$this->load->database('callcenter', TRUE);		//$this->db->join('reportcallcenter.callcontactsdetails', 'recordings.unique_id = reportcallcenter.callcontactsdetails.callid');		//$this->db->join('callcenter.users', 'recordings.userid = users.userid');		if (isset($per_page) && isset($current_page) ){			$this->db->limit($per_page, $current_page);		}/*		if(!empty($agent_name)){			$this->db->like('users.username', $agent_name);		} */		if(!empty($start_date)){			$this->db->where('date(`recordings`.`date_created`) >=  ', $start_date);		}		if(!empty($end_date)){			$this->db->where('date(`recordings`.`date_created`) <=  ', $end_date);		}		if(!empty($status)){			if($status == 3){				//$this->db->where('recordings.status', 3);				$this->db->where('recordings.status', 5);			}else if($status == 5){				$this->db->where('recordings.recover', 1);			}else{				$this->db->where('recordings.status', $status);			}		}		$this->db->where('recordings.recording_type', 2);		$this->db->where('date(recordings.date_created) <  ', $check_old_date);		$this->db->where('recordings.supervisor_id', $userid);		//$this->db->order_by('callcenter.users.username', 'asc');		$this->db->order_by('recordings.date_created', 'desc');		//$this->db->limit(100);		return $this;	}	function join_submitted_recording($record_id)	{		$this->load->database('callcenter', TRUE);		$this->db->join('qm.rate_info', 'recordings.record_id = rate_info.record_id');		$this->db->join('qm.rate_info_criteria', 'recordings.record_id = rate_info_criteria.record_id');		$this->db->join('qm.rate_info_question', 'rate_info_criteria.criteria_id = rate_info_question.criteria_id');		$this->db->join('qm.question', 'rate_info_question.question_id = question.question_id');		$this->db->join('callcenter.users', 'recordings.userid = users.userid');		$this->db->join('qm.recordings_and_qm', 'recordings.record_id = recordings_and_qm.record_id');		$this->db->join('qm.qm_form', 'recordings_and_qm.qm_id = qm_form.qm_id');		$this->db->where('qm.recordings.record_id', $record_id);		$this->db->where('qm.rate_info.record_id', $record_id);		$this->db->where('qm.rate_info_criteria.record_id', $record_id);		$this->db->where('qm.rate_info_question.record_id', $record_id);		$this->db->where('recordings.recording_type', 2);		$this->db->order_by('qm.rate_info_criteria.criteria_title', 'asc');		return $this;	}	function x_week_range($date) {		$ts = strtotime($date);		$start = (date('w', $ts) == 0) ? $ts : strtotime('last sunday', $ts);		return array(date('Y-m-d', $start),					 date('Y-m-d', strtotime('next saturday', $start)));	}	function createDateRangeArray($strDateFrom,$strDateTo)	{		// takes two dates formatted as YYYY-MM-DD and creates an		// inclusive array of the dates between the from and to dates.		// could test validity of dates here but I'm already doing		// that in the main script		$aryRange=array();		$iDateFrom=mktime(1,0,0,substr($strDateFrom,5,2),     substr($strDateFrom,8,2),substr($strDateFrom,0,4));		$iDateTo=mktime(1,0,0,substr($strDateTo,5,2),     substr($strDateTo,8,2),substr($strDateTo,0,4));		if ($iDateTo>=$iDateFrom)		{			array_push($aryRange,date('Y-m-d',$iDateFrom)); // first entry			while ($iDateFrom<$iDateTo)			{				$iDateFrom+=86400; // add 24 hours				array_push($aryRange,date('Y-m-d',$iDateFrom));			}		}		return $aryRange;	}}?>